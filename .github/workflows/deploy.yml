name: Deploy

on:
  push:
    branches: [master]

jobs:
  build:
    runs-on: ubuntu-latest

    env:
      DB_HOST: localhost
      DB_USER: postgres
      DB_PASS: postgres
      DB_NAME_TEST: cqrs_demo_db_test
      DB_PORT: 5432

    strategy:
      matrix:
        node-version: [18.x]

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: cqrs_demo_db_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Use Node.js ${{ matrix.node-version }}
      - uses: actions/checkout@v3
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}

      - name: Install dependencies
        run: npm ci

      - name: Build project
        run: npm run build

      - name: Run unit tests
        run: npm run test

      - name: Run e2e tests
        run: npm run test:e2e

      - name: Increment version
      - id: version-bump
      - uses: paulhatch/semantic-version@v4.0.2
        with:
          tag_prefix: "v"
          major_pattern: "BREAKING CHANGE"
          minor_pattern: "feat"
          format: "${major}.${minor}.${patch}"

      - name: Configure AWS credentials
      - uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-2

      - name: Login to Amazon ECR
      - id: login-ecr
      - uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push docker image to Amazon ECR
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: cqrs-demo-repo
          IMAGE_TAG: ${{ steps.version-bump.outputs.version }}
        run: |
          docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG .
          docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG